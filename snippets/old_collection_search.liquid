<style>
  .collection-search {
    margin-bottom: 2rem;
    padding: 0 1rem;
  }
  .collection-search__form {
    max-width: 500px;
    margin: 0 auto;
    position: relative;
  }
  .collection-search__input {
    width: 100%;
    padding: 1rem;
    border: 1px solid #090a0c80;
    border-radius: 10px;
  }
  .collection-search__input:focus {
    outline: 1px solid #0044cc80;
  }
  .collection-search__button {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    border: none;
    background: none;
    padding: 0;
    cursor: pointer;
  }

  .search-mode-container {
    display: grid;
    grid-template-columns: repeat({{section.settings.columns_desktop}}, 1fr);
    grid-template-rows: auto;
    gap: var(--grid-desktop-vertical-spacing) var(--grid-desktop-horizontal-spacing);
  }

  @media screen and (max-width: 749px) {
    .search-mode-container {
      grid-template-columns: repeat({{section.settings.columns_mobile}}, 1fr);
    }
  }

  .no-results-message {
    text-align: center;
    padding: 2rem;
    grid-column: 1 / -1;
    color: var(--color-text);
  }
</style>

<div class='collection-search'>
  <form class='collection-search__form' onsubmit='return false;'>
    <input
      type='text'
      name='q'
      class='collection-search__input'
      placeholder='{{ 'general.search.search' | t }}'
      value='{{ search.terms | escape }}'
      aria-label='{{ 'general.search.search' | t }}'
    >
    <button type='button' class='collection-search__button'>
      <svg width='18' height='18' viewBox='0 0 18 18' fill='none' xmlns='http://www.w3.org/2000/svg'>
        <path d="M17.7 16.3L13.4 12C14.4 10.7 15 9.2 15 7.5C15 3.4 11.6 0 7.5 0C3.4 0 0 3.4 0 7.5C0 11.6 3.4 15 7.5 15C9.2 15 10.7 14.4 12 13.4L16.3 17.7C16.5 17.9 16.7 18 17 18C17.3 18 17.5 17.9 17.7 17.7C18.1 17.3 18.1 16.7 17.7 16.3ZM2 7.5C2 4.5 4.5 2 7.5 2C10.5 2 13 4.5 13 7.5C13 10.5 10.5 13 7.5 13C4.5 13 2 10.5 2 7.5Z" fill="currentColor"/>
      </svg>
      <span class='visually-hidden'>{{ 'general.search.search' | t }}</span>
    </button>
  </form>
</div>

<script>
    // Will search by: title, tags, variants and custom.metafields.search_terms
    class CollectionSearch {
      constructor() {
        // Initialize elements
        this.form = document.querySelector('.collection-search__form');
        this.input = document.querySelector('.collection-search__input');
        this.button = document.querySelector('.collection-search__button');
        this.paginatedContainer = document.querySelector('#product-grid');
        this.searchContainer = document.querySelector('.search-mode-container');
        this.searchItems = document.querySelectorAll('.search-mode-item');
  
        // Bind events with debounce
        this.input.addEventListener('input', this.debounce(this.handleSearch.bind(this), 300));
        this.button.addEventListener('click', this.handleClear.bind(this));
  
        // Initialize state
        this.isSearchMode = false;
  
        // Initialize Fuse.js options for fuzzy search
        this.searchOptions = {
          threshold: 0.3,
          keys: ['title', 'tags', 'variants', 'searchTerms'],
        };
  
        // Track when search is first used
        this.hasTrackedFirstSearch = false;
  
        // Add search session tracking
        this.lastSearchTerm = '';
        this.searchTimeout = null;
        this.searchDelay = 1500; // 1.5 seconds of no typing before considering it a "final" search
      }
  
      // Debounce helper function
      debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }
  
      handleSearch(event) {
        const searchTerm = event.target.value.toLowerCase().trim();
        
        if (searchTerm.length > 0) {
          // Track first search interaction with the initial search term
          if (!this.hasTrackedFirstSearch) {
            this.trackSearchInteraction('search_started', { search_term: searchTerm });
            this.hasTrackedFirstSearch = true;
          }
  
          // Clear existing timeout
          if (this.searchTimeout) {
            clearTimeout(this.searchTimeout);
          }
  
          // Set new timeout for "final" search
          this.searchTimeout = setTimeout(() => {
            // Only track if the search term has changed significantly
            if (this.shouldTrackNewSearch(searchTerm)) {
              this.lastSearchTerm = searchTerm;
              this.trackSearchResults(searchTerm);
            }
          }, this.searchDelay);
  
          this.enterSearchMode();
          this.filterProducts(searchTerm);
          this.button.innerHTML = `
            <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M17.7 1.3L16.7 0.3L9 8L1.3 0.3L0.3 1.3L8 9L0.3 16.7L1.3 17.7L9 10L16.7 17.7L17.7 16.7L10 9L17.7 1.3Z" fill="currentColor"/>
            </svg>
            <span class="visually-hidden">Clear search</span>
          `;
        } else {
          this.exitSearchMode();
        }
      }
  
      handleClear() {
        if (this.isSearchMode) {
          this.input.value = '';
          this.exitSearchMode();
        }
      }
  
      enterSearchMode() {
        if (!this.isSearchMode) {
          this.isSearchMode = true;
          if (this.paginatedContainer) {
            this.paginatedContainer.style.display = 'none';
          }
          if (this.searchContainer) {
            this.searchContainer.style.display = 'grid';
          }
        }
      }
  
      exitSearchMode() {
        this.isSearchMode = false;
        if (this.paginatedContainer) {
          this.paginatedContainer.style.display = 'flex';
        }
        if (this.searchContainer) {
          this.searchContainer.style.display = 'none';
        }
        this.button.innerHTML = `
          <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M17.7 16.3L13.4 12C14.4 10.7 15 9.2 15 7.5C15 3.4 11.6 0 7.5 0C3.4 0 0 3.4 0 7.5C0 11.6 3.4 15 7.5 15C9.2 15 10.7 14.4 12 13.4L16.3 17.7C16.5 17.9 16.7 18 17 18C17.3 18 17.5 17.9 17.7 17.7C18.1 17.3 18.1 16.7 17.7 16.3ZM2 7.5C2 4.5 4.5 2 7.5 2C10.5 2 13 4.5 13 7.5C13 10.5 10.5 13 7.5 13C4.5 13 2 10.5 2 7.5Z" fill="currentColor"/>
          </svg>
          <span class="visually-hidden">Search</span>
        `;
      }
  
      filterProducts(searchTerm) {
        // Create a regex pattern for the search term
        const searchPattern = new RegExp(searchTerm.split('').join('.*'), 'i');
  
        this.searchItems.forEach((item) => {
          console.log('item dataset searchJson', item.dataset.searchJson);
  
          try {
            // Parse the JSON data and clean it up
            const rawData = item.dataset.searchJson
              .replace(/\n\s+/g, '') // Remove newlines and extra spaces
              .replace(/(['"])?([a-zA-Z0-9_]+)(['"])?\s*:/g, '"$2":') // Ensure proper JSON property quotes
              .replace(/'/g, '"'); // Replace single quotes with double quotes
  
            const productData = JSON.parse(rawData);
  
            // Check each field for matches
            const matches = this.searchInObject(productData, searchPattern);
  
            item.style.display = matches ? 'block' : 'none';
          } catch (error) {
            console.warn('Error parsing product data:', error);
            item.style.display = 'none';
          }
        });
  
        // Remove the tracking from here since it's now handled by the debounced handler
        const hasVisibleResults = Array.from(this.searchItems)
          .some((item) => item.style.display === 'block');
        this.toggleNoResults(!hasVisibleResults);
      }
  
      searchInObject(obj, pattern) {
        // Search in array values
        const searchInArray = (arr) => {
          if (!Array.isArray(arr)) return false;
          return arr.some((item) => {
            if (typeof item === 'string') {
              return pattern.test(item.toLowerCase());
            }
            if (typeof item === 'object' && item !== null) {
              return this.searchInObject(item, pattern);
            }
            return false;
          });
        };
  
        // Handle null or undefined values
        if (!obj) return false;
  
        return Object.values(obj).some((value) => {
          if (typeof value === 'string') {
            return pattern.test(value.toLowerCase());
          }
          if (Array.isArray(value)) {
            return searchInArray(value);
          }
          if (typeof value === 'object' && value !== null) {
            return this.searchInObject(value, pattern);
          }
          return false;
        });
      }
  
      toggleNoResults(show) {
        let noResultsEl = this.searchContainer.querySelector('.no-results-message');
  
        if (show) {
          if (!noResultsEl) {
            noResultsEl = document.createElement('div');
            noResultsEl.className = 'no-results-message';
            noResultsEl.textContent = '{{ 'templates.search.general_no_results' | t }}';
            this.searchContainer.appendChild(noResultsEl);
          }
          noResultsEl.style.display = 'block';
        } else if (noResultsEl) {
          noResultsEl.style.display = 'none';
        }
      }
  
      // Add new tracking method
      trackSearchInteraction(event_name, additionalParams = {}) {
        const eventParams = {
          event: 'collection_search',
          search_interaction: event_name,
          ...additionalParams
        };
  
        // Push to dataLayer
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push(eventParams);
  
        // Send to GA4
        if (typeof gtag === 'function') {
          gtag('event', 'collection_search', eventParams);
        }
      }
  
      // Helper to determine if we should track a new search
      shouldTrackNewSearch(newTerm) {
        // If it's the same as last search, don't track
        if (newTerm === this.lastSearchTerm) return false;
        
        // If it's just adding/removing characters from last search
        // and the difference is small, don't track
        if (this.lastSearchTerm && 
            (newTerm.includes(this.lastSearchTerm) || 
             this.lastSearchTerm.includes(newTerm))) {
          const difference = Math.abs(newTerm.length - this.lastSearchTerm.length);
          if (difference < 3) return false;
        }
        
        return true;
      }
  
      // Separate method for tracking search results
      trackSearchResults(searchTerm) {
        const hasVisibleResults = Array.from(this.searchItems)
          .some((item) => item.style.display === 'block');
  
        this.trackSearchInteraction(
          hasVisibleResults ? 'search_results' : 'search_no_results',
          { search_term: searchTerm }
        );
      }
    }
  
    // Initialize search when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      new CollectionSearch();
    });
</script>
